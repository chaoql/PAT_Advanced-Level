#include<bits/stdc++.h>
#include<unordered_map>
using namespace std;
string a[5];
unordered_map<char, long long int>m;
char num[36] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };
int tag, radix, flag;
long long maxx, sum;
int judge(int x)
{
    long long temp = 0;
    for (int i = 0; i < a[flag].size(); i++)
        temp += m[a[flag][i]] * pow(x, a[flag].size() - 1 - i);
    if (temp == sum)
        return 1;
    else if (temp > sum || temp < 0)
        return 2;
    else
        return 3;
}
int main()
{
    long long l, r, s = 2;
    for (long long int i = 0; i < 36; i++)
        m[num[i]] = i;
    cin >> a[1] >> a[2] >> tag >> radix;
    for (int i = 0; i < a[tag].size(); i++)
        sum += m[a[tag][i]] * pow(radix, a[tag].size() - 1 - i);
    if (tag == 1)
        flag = 2;
    else
        flag = 1;
    for (int i = a[flag].size() - 1; i >= 0; i--)
        maxx = max(m[a[flag][i]], maxx);
    l = max(maxx + 1, s);//进制最小为2进制
    r = max(sum + 1, l);
    while (l <= r)
    {
        long long mid = (l + r) / 2;
        int t = judge(mid);
        if (t == 1)
        {
            cout << mid;
            return 0;
        }
        else if (t == 2)
            r = mid - 1;
        else if (t == 3)
            l = mid + 1;
    }
    cout << "Impossible";
    return 0;
}
